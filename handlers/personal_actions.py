from dispatcher import dp
import config
from aiogram import Bot,types,executor,Dispatcher
from bot import BotDB
import json
import asyncio
import re
import requests
from bs4 import BeautifulSoup as BS
import time
import string

@dp.message_handler(commands = ["start", "help"])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç!\n –Ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä, —Å–ª–µ–∂—É –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ üôÇ")

@dp.message_handler(commands=['id_users'])
async def id(message: types.Message):
    await message.reply(f"–í–∞—à ID: {message.from_user.id}")

@dp.message_handler(commands = ["well_USD"])
async def start_ud(message: types.Message):
    url = 'https://www.currency.me.uk/convert/usd/rub'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    result = soup.find("span", { "class" : "mini ccyrate" }).text
    res = (result)
    await message.reply(res)

@dp.message_handler(commands = ["well_EUR"])
async def start(message: types.Message):
    url = 'https://finance.rambler.ru/currencies/EUR/'
    r = requests.get(url)
    soup = BS(r.text, 'lxml')
    result = soup.find("div", { "class" : "finance-currency-plate__currency" }).text
    res = f"1 EUR üîª {result}RUB"
    await message.reply(res)

@dp.message_handler(commands=['id_chat'])
async def chat(message: types.Message):
    await message.reply(f"ID —á–∞—Ç–∞: {message.chat.id}")


@dp.message_handler(commands=["ban"], commands_prefix="/")
async def stabs(message: types.Message):
    if str(message.from_user.id) == config.ADMIN_ID:
        if not message.reply_to_message:
            await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
            return
        await message.bot.delete_message(config.CHAT_ID, message.message_id)
        await message.bot.kick_chat_member(config.CHAT_ID, user_id=message.reply_to_message.from_user.id)
        await message.answer("ProtoNetX —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–∏–ª —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n –•–µ-—Ö–µ)")
    else:
        await message.reply("–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–∞–Ω–¥—É –±–∞–Ω–∞ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –ê–¥–º–∏–Ω!")

@dp.message_handler(commands = ("spent", "earned", "s", "e"))
async def start(message: types.Message):
    cmd_variants = (('/spent', '/s'), ('/earned', '/e'))
    operation = '-' if message.text.startswith(cmd_variants[0]) else '+'

    value = message.text
    for i in cmd_variants:
        for j in i:
            value = value.replace(j, '').strip()

    if(len(value)):
        x = re.findall(r"\d+(?:.\d+)?", value)
        if(len(x)):
            value = float(x[0].replace(',', '.'))

            BotDB.add_record(message.from_user.id, operation, value)

            if(operation == '-'):
                await message.reply("‚úÖ –ó–∞–ø–∏—Å—å –æ <u><b>—Ä–∞—Å—Ö–æ–¥–µ</b></u> —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω–∞!")
            else:
                await message.reply("‚úÖ –ó–∞–ø–∏—Å—å –æ <u><b>–¥–æ—Ö–æ–¥–µ</b></u> —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω–∞!")
        else:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É!")
    else:
        await message.reply("–ù–µ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞!")

@dp.message_handler(commands = ("history", "h"))
async def start(message: types.Message):
    cmd_variants = ('/history', '/h')
    within_als = {
        "day": ('today', 'day', '—Å–µ–≥–æ–¥–Ω—è', '–¥–µ–Ω—å'),
        "month": ('month', '–º–µ—Å—è—Ü'),
        "year": ('year', '–≥–æ–¥'),
    }

    cmd = message.text
    for r in cmd_variants:
        cmd = cmd.replace(r, '').strip()

    within = 'day'
    if(len(cmd)):
        for k in within_als:
            for als in within_als[k]:
                if(als == cmd):
                    within = k

    records = BotDB.get_records(message.from_user.id, within)

    if(len(records)):
        answer = f"üïò –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ {within_als[within][-1]}\n\n"

        for r in records:
            answer += "<b>" + ("‚ûñ –†–∞—Å—Ö–æ–¥" if not r[2] else "‚ûï –î–æ—Ö–æ–¥") + "</b>"
            answer += f" - {r[3]}"
            answer += f" <i>({r[4]})</i>\n"

        await message.reply(answer)
    else:
        await message.reply("–ó–∞–ø–∏—Å–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!") 

@dp.message_handler(commands = ("start_news"))
async def start_new(message: types.Message):
    print("–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π - —É—Å–ø–µ—à–Ω–æ!")
    while True:
        if str(message.from_user.id) == config.ADMIN_ID:
            url = 'https://habr.com/ru/news/'
            r = requests.get(url)
            soup = BS(r.text, 'lxml')
            result = soup.find("a", { "class" : "tm-article-snippet__title-link" }).text
            res_url = soup.find(class_='tm-article-snippet__title-link')['href']
            await asyncio.sleep(20000)
            await message.bot.send_message(-1001533296339, f'‚ö°Ô∏è#IT_–ù–æ–≤–æ—Å—Ç–∏\n<a href="https://habr.com{res_url}">{result}</a>')  
        else:
            await message.reply(f"–£–≤—ã, —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω")

# -1001533296339

@dp.message_handler()
async def filter_mes(message: types.Message):
        if {i.lower().translate(str.maketrans('', '', string.punctuation)) for i in message.text.split(' ')}.intersection(set(json.load(open('mat.json')))) != set():
            await message.delete()

@dp.message_handler(content_types=["new_chat_members"])
async def start_commandr(message: types.Message):
    msg = await message.reply(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ï—Å–ª–∏ –≤—ã –ø—Ä–∏—à–ª–∏ –ø–æ –∫–∞–∫–æ–º—É-—Ç–æ –≤–æ–ø—Ä–æ—Å—É, —Ç–æ –∏—Ö –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –∑–¥–µ—Å—å.\n –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ –∂–µ–ª–∞–Ω–∏—é –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª - @ait_bro01z")
    await asyncio.sleep(600)
    await msg.delete()
    await message.delete()